package com.osp.cts.model;

import com.osp.cts.model.common.HrAppModule;

import com.osp.cts.model.queries.EmployeesROVOImpl;

import oracle.jbo.server.ApplicationModuleImpl;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;

import oracle.apps.xdo.template.FOProcessor;
import oracle.apps.xdo.template.RTFProcessor;

import oracle.jbo.VariableValueManager;

import oracle.jbo.server.ViewObjectImpl;

import oracle.xml.parser.v2.XMLNode;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Aug 05 02:06:18 CDT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HrAppModuleImpl extends ApplicationModuleImpl implements HrAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public HrAppModuleImpl() {
    }
    XMLNode xmlnode5 = null;    
          
        
        public byte[] getHrReport(String deptId){     
            
            byte[] databytes = null;    
            
            
            try{
                String str = "ReportTemplates/HR.rtf";
                File file = new File(str);
                String actualPathofFile = file.getAbsolutePath();
                
                //creating xsl template      
                RTFProcessor rtfp  = new RTFProcessor(actualPathofFile);
                ByteArrayOutputStream xslotptstream = new ByteArrayOutputStream();
                rtfp.setOutput(xslotptstream);
                rtfp.process();
                
                //merge xsl template with vo data to generate report & return outputstream
                ByteArrayInputStream xslinptstream = new ByteArrayInputStream(xslotptstream.toByteArray());
                
                FOProcessor foprocessor = new FOProcessor();
                ByteArrayInputStream bytedatastream = new ByteArrayInputStream(getXMLDataHr(deptId));
                foprocessor.setData(bytedatastream);
                foprocessor.setTemplate(xslinptstream);
                
                ByteArrayOutputStream pdfotptstream = new ByteArrayOutputStream();
                foprocessor.setOutput(pdfotptstream);
                
                byte otptfileformat = FOProcessor.FORMAT_PDF;
                
                foprocessor.setOutputFormat(otptfileformat);
                foprocessor.generate();
                
                databytes = pdfotptstream.toByteArray();           
                
                
            }
            catch(Exception e){
                System.out.println(e.getMessage());
            }
            
            return databytes;
        }
        
        public byte[] getXMLDataHr(String deptId){    
            
            byte[] databytes = null;
            StringBuffer sb = new StringBuffer();
            String finalXMLData = null;
            
            try{
                EmployeesROVOImpl vo = getEmployeesROVO1();  
                
                if(deptId != null){
                                   
                    vo.setDeptId(new oracle.jbo.domain.Number(deptId));               
                    
                }
                vo.executeQuery();
                
                if(vo.getEstimatedRowCount() > 0){                  
                     
                    
                    xmlnode5 = (XMLNode)vo.writeXML(0, 0L);           
                
                    if (xmlnode5 != null) {           
                        StringWriter sb1 = new StringWriter();
                        xmlnode5.print(new PrintWriter(sb1));
                        sb.append(sb1.toString());               
                               
                    }
                
                
                    finalXMLData = sb.toString();
                    //System.out.println("final -" + finalXMLData);
                    databytes = finalXMLData.getBytes();
                }
                else{
                    sb = new StringBuffer();
                    sb.append("<?xml version='1.0' encoding='utf-8' ?>");
                    sb.append("<Employees>");                
                    sb.append("<EmployeesRow>");                
                    
                    sb.append("<DepartmentId>"+ deptId +"</DepartmentId>");         
                    
                    sb.append("</EmployeesRow>");                
                    sb.append("</Employees>");
                    
                    finalXMLData = sb.toString();
                    databytes = finalXMLData.getBytes();
                    
                    
                    }
                    
                    //System.out.println("final -" + finalXMLData);
            }
            
            
            catch(Exception e){
                System.out.println("Error :" + e.getMessage());
            }
            
            return databytes;
        }


    /**
     * Container's getter for EmployeesROVO1.
     * @return EmployeesROVO1
     */
    public EmployeesROVOImpl getEmployeesROVO1() {
        return (EmployeesROVOImpl) findViewObject("EmployeesROVO1");
    }
}

